Commands that you can run in the project root.

To compile the engine:
bazel build //:chaturaji_engine -c opt

---------------------------------------------------------------------

To train a model:

Arguments:
  --train                 : Enter training mode.
  --iterations N          : Number of training iterations (default: 65563).
  --games-per-iter N      : Number of self-play games per iteration (default: 128).
  --steps-per-iter N      : Number of training steps (batches) per iteration (default: 13).
  --train-batch N         : Batch size for the training steps (default: 1024).
  --workers N             : Number of parallel self-play worker threads (default: 12).
  --nn-batch N            : Max batch size for the central NN evaluator thread (default: 1024).
  --worker-batch N        : Batch size for MCTS leaf evaluations *within* a worker thread before waiting for results (default: 48).
  --sims N                : Number of MCTS simulations per move during self-play (default: 128).
  --save-dir PATH         : Directory to save model checkpoints (default: /content/drive/MyDrive/models).
  --load-model PATH       : Path to an existing model to continue training from (optional).
  --lr VALUE              : Learning rate (default: 0.001).
  --wd VALUE              : Weight decay (default: 1e-4).

Example - Test Run (adjust workers/batches based on your CPU/GPU):
bazel run //:chaturaji_engine -c opt -- --train --iterations 1 --games-per-iter 50 --steps-per-iter 10 --train-batch 64 --workers 4 --nn-batch 128 --worker-batch 16 --save-dir C:/Users/dell3/source/repos3/4pc-ffa-chaturaji-mcts-cpp/models --sims 10 

Example - Serious Training Run (adjust workers/batches based on your CPU/GPU):
bazel run //:chaturaji_engine -c opt -- --train --iterations 65536 --games-per-iter 128 --steps-per-iter 13 --train-batch 16384 --workers 48 --nn-batch 1024 --worker-batch 48 --save-dir C:/Users/dell3/source/repos3/4pc-ffa-chaturaji-mcts-cpp/models --sims 512 

---------------------------------------------------------------------

To simulate a game using a trained model (Inference Mode):

Arguments:
  --model PATH            : Path to the trained model (.pt file).
  --sims N                : Number of MCTS simulations per move (default: 1000).
  --mcts-batch N          : Batch size for *synchronous* MCTS NN calls during inference (default: 16).

Example:
.\bazel-bin\chaturaji_engine.exe --model "C:\Users\dell3\source\repos3\4pc-ffa-chaturaji-mcts-cpp\models\run_YYYYMMDD_HHMMSS\chaturaji_iter_N.pt" --sims 1000 --mcts-batch 64

Terminal Setup (Windows):
To ensure print_board displays the pieces correctly in the Windows terminal, run this command *before* running the engine executable:
chcp 65001

---------------------------------------------------------------------

To run a strength test between two models:

Arguments:
  --strength-test         : Enter strength test mode.
  --new-model PATH        : Path to the 'newer' model file (required).
  --old-model PATH        : Path to the 'older' model file (required).
  --games N               : Number of games to play (default: 100).
  --sims N                : Number of MCTS simulations per move (default: 250 - check main.cpp for current default).
  --mcts-batch N          : Batch size for *synchronous* MCTS NN calls during the test (default: 64 - check main.cpp for current default).

Details:
  The test runs the specified number of games. In each game, the '--new-model'
  player assignment cycles through RED, BLUE, YELLOW, GREEN. The '--old-model'
  plays the other three colors. The final report shows the win rate for the
  '--new-model' based on achieving the highest score.

Example:
.\bazel-bin\chaturaji_engine.exe --strength-test --new-model "C:\Users\dell3\Downloads\chaturaji_iter_26.pt" --old-model "C:\Users\dell3\Downloads\chaturaji_iter_1.pt" --games 100 --sims 256 --mcts-batch 64

---------------------------------------------------------------------

To run Zobrist hashing tests:

Compile the test:
bazel build //:zobrist_test

Run the test and show output:
bazel test //:zobrist_test --test_output=all